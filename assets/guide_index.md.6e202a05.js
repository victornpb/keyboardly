import{_ as e,c as t,o,d as a}from"./app.625df749.js";const f=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction"}],"relativePath":"guide/index.md","lastUpdated":1677637251000}'),i={name:"guide/index.md"},n=a('<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>Keyboardly works by handling keyboard events and delegating actions to specific elements on the DOM. This allow you to easily retro-fit great user experience onto existing Apps and sites.</p><p>The premise:</p><blockquote><h3> If theres a button, you should be able to activate it with the keyboard </h3></blockquote><p>So if you have been building Apps only for mouse and touch, Keyboardly is a great option to enhance the user experience for keyboard.</p><p>And if you&#39;re building an App from scratch, Keyboardly greatly simplifies how you develop an App for keyboard use.</p><p>And since it uses the DOM it has several advantages:</p><ul><li>You don&#39;t need to worry about keyboard event life cicles. What if this component leaves the page and I forget to disable this event, now all the sudden the keyboard respond to ghost actions.</li><li>Library / Framework agnostic You don&#39;t need to sprinkle logic in every component of your favorite framework</li></ul>',9),r=[n];function d(s,l,c,h,p,u){return o(),t("div",null,r)}var g=e(i,[["render",d]]);export{f as __pageData,g as default};
